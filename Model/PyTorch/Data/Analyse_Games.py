import operator

analyzed = [[{} for j in range(9)] for i in range(9)]
games = []

for path in [f"../../../Game/C++/MCTS_V2.5/record{i}.txt" for i in range(20, 23)]:
    with open(path) as file:
        for row in file:
            if len(row.strip()) > 0:
                games.append(row.strip())

                moves = [int(e) for e in row.strip()]
                g = moves[0]
                l = moves[1]        
            
                pair = (moves[2], moves[3])

                if pair in analyzed[g][l]:
                    analyzed[g][l][pair][0] += 1

                else:
                    analyzed[g][l][pair] = [1, {}]


def wrap(s):
    return "{"+s+"}"


board = [[[] for j in range(9)] for i in range(9)]

for i in range(9):
    for j in range(9):
        for key, val in analyzed[i][j].items():
            board[i][j].append((key[0], key[1], val[0]))
            
#         print(f"({i}, {j}):   [{', '.join([f'{key}: {val[0]}' for key, val in analyzed[i][j].items()])}]")

print(wrap(",\n ".join([wrap(", ".join([wrap(", ".join([wrap(", ".join([str(v) for v in k])) for k in move])) for move in quadrant])) for quadrant in board])))
        

'''
(0, 0):   [(0, 5): 1, (0, 6): 2, (0, 2): 5, (0, 7): 1, (0, 8): 1]
(0, 1):   [(1, 5): 8, (1, 3): 1, (1, 7): 1]
(0, 2):   [(2, 2): 4, (2, 6): 4, (2, 8): 2]
(0, 3):   [(3, 7): 10]
(0, 4):   [(4, 4): 10]
(0, 5):   [(5, 1): 1, (5, 7): 9]
(0, 6):   [(6, 6): 7, (6, 2): 2, (6, 8): 1]
(0, 7):   [(7, 5): 9, (7, 7): 1]
(0, 8):   [(8, 8): 10]
(1, 0):   [(0, 8): 10]
(1, 1):   [(1, 5): 3, (1, 3): 7]
(1, 2):   [(2, 6): 10]
(1, 3):   [(3, 5): 5, (3, 3): 3, (3, 7): 2]
(1, 4):   [(4, 4): 10]
(1, 5):   [(5, 7): 5, (5, 3): 5]
(1, 6):   [(6, 6): 10]
(1, 7):   [(7, 5): 3, (7, 3): 7]
(1, 8):   [(8, 8): 10]
(2, 0):   [(0, 0): 4, (0, 8): 4, (0, 6): 2]
(2, 1):   [(1, 5): 1, (1, 3): 9]
(2, 2):   [(2, 0): 3, (2, 3): 2, (2, 6): 2, (2, 7): 1, (2, 8): 2]
(2, 3):   [(3, 7): 7, (3, 3): 1, (3, 1): 2]
(2, 4):   [(4, 4): 10]
(2, 5):   [(5, 7): 9, (5, 1): 1]
(2, 6):   [(6, 6): 10]
(2, 7):   [(7, 3): 9, (7, 5): 1]
(2, 8):   [(8, 8): 9, (8, 0): 1]
(3, 0):   [(0, 8): 10]
(3, 1):   [(1, 1): 5, (1, 7): 4, (1, 5): 1]
(3, 2):   [(2, 2): 10]
(3, 3):   [(3, 1): 8, (3, 7): 2]
(3, 4):   [(4, 4): 9]
(3, 5):   [(5, 1): 5, (5, 7): 4]
(3, 6):   [(6, 2): 9]
(3, 7):   [(7, 7): 4, (7, 1): 3, (7, 5): 2]
(3, 8):   [(8, 8): 8, (8, 0): 1]
(4, 0):   [(0, 0): 8, (0, 8): 1]
(4, 1):   [(1, 5): 4, (1, 3): 5]
(4, 2):   [(2, 2): 9]
(4, 3):   [(3, 1): 5, (3, 7): 4]
(4, 4):   [(4, 8): 8, (4, 6): 5, (4, 0): 6, (4, 2): 10]
(4, 5):   [(5, 1): 7, (5, 7): 2]
(4, 6):   [(6, 6): 9]
(4, 7):   [(7, 5): 7, (7, 3): 2]
(4, 8):   [(8, 8): 8, (8, 0): 1]
(5, 0):   [(0, 0): 9]
(5, 1):   [(1, 1): 3, (1, 7): 4, (1, 3): 2]
(5, 2):   [(2, 2): 1, (2, 6): 7, (2, 0): 1]
(5, 3):   [(3, 7): 6, (3, 1): 3]
(5, 4):   [(4, 4): 9]
(5, 5):   [(5, 7): 5, (5, 1): 4]
(5, 6):   [(6, 6): 8, (6, 2): 1]
(5, 7):   [(7, 1): 4, (7, 7): 3, (7, 3): 2]
(5, 8):   [(8, 0): 9]
(6, 0):   [(0, 0): 6, (0, 8): 2, (0, 2): 1]
(6, 1):   [(1, 5): 7, (1, 3): 2]
(6, 2):   [(2, 2): 9]
(6, 3):   [(3, 1): 9]
(6, 4):   [(4, 4): 9]
(6, 5):   [(5, 1): 9]
(6, 6):   [(6, 5): 2, (6, 2): 2, (6, 0): 1, (6, 8): 2, (6, 1): 2]
(6, 7):   [(7, 5): 9]
(6, 8):   [(8, 8): 7, (8, 2): 2]
(7, 0):   [(0, 0): 9]
(7, 1):   [(1, 3): 4, (1, 5): 5]
(7, 2):   [(2, 2): 9]
(7, 3):   [(3, 5): 3, (3, 1): 1, (3, 3): 5]
(7, 4):   [(4, 4): 9]
(7, 5):   [(5, 3): 3, (5, 5): 3, (5, 1): 3]
(7, 6):   [(6, 2): 9]
(7, 7):   [(7, 3): 3, (7, 5): 5, (7, 1): 1]
(7, 8):   [(8, 0): 9]
(8, 0):   [(0, 0): 9]
(8, 1):   [(1, 3): 6, (1, 1): 1, (1, 5): 2]
(8, 2):   [(2, 4): 1, (2, 2): 6, (2, 0): 2]
(8, 3):   [(3, 1): 8, (3, 3): 1]
(8, 4):   [(4, 4): 9]
(8, 5):   [(5, 1): 9]
(8, 6):   [(6, 2): 5, (6, 0): 1, (6, 6): 3]
(8, 7):   [(7, 3): 9]
(8, 8):   [(8, 3): 1, (8, 0): 4, (8, 1): 1, (8, 2): 2, (8, 6): 1]
'''


print("There are ", len(games), " games")

unique = list(set(games))
print("There are ", len(unique), " unique games")
